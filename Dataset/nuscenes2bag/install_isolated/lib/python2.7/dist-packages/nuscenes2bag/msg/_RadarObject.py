# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nuscenes2bag/RadarObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class RadarObject(genpy.Message):
  _md5sum = "2dca0314b6fc449f331ba195c716ed10"
  _type = "nuscenes2bag/RadarObject"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Vector3 pose
uint8 dyn_prop
uint16 id
float32 rcs
float32 vx
float32 vy
float32 vx_comp
float32 vy_comp
uint8 is_quality_valid
uint8 ambig_state
uint8 x_rms
uint8 y_rms
uint8 invalid_state
uint8 pdh0
uint8 vx_rms
uint8 vy_rms
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['pose','dyn_prop','id','rcs','vx','vy','vx_comp','vy_comp','is_quality_valid','ambig_state','x_rms','y_rms','invalid_state','pdh0','vx_rms','vy_rms']
  _slot_types = ['geometry_msgs/Vector3','uint8','uint16','float32','float32','float32','float32','float32','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pose,dyn_prop,id,rcs,vx,vy,vx_comp,vy_comp,is_quality_valid,ambig_state,x_rms,y_rms,invalid_state,pdh0,vx_rms,vy_rms

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pose is None:
        self.pose = geometry_msgs.msg.Vector3()
      if self.dyn_prop is None:
        self.dyn_prop = 0
      if self.id is None:
        self.id = 0
      if self.rcs is None:
        self.rcs = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.vx_comp is None:
        self.vx_comp = 0.
      if self.vy_comp is None:
        self.vy_comp = 0.
      if self.is_quality_valid is None:
        self.is_quality_valid = 0
      if self.ambig_state is None:
        self.ambig_state = 0
      if self.x_rms is None:
        self.x_rms = 0
      if self.y_rms is None:
        self.y_rms = 0
      if self.invalid_state is None:
        self.invalid_state = 0
      if self.pdh0 is None:
        self.pdh0 = 0
      if self.vx_rms is None:
        self.vx_rms = 0
      if self.vy_rms is None:
        self.vy_rms = 0
    else:
      self.pose = geometry_msgs.msg.Vector3()
      self.dyn_prop = 0
      self.id = 0
      self.rcs = 0.
      self.vx = 0.
      self.vy = 0.
      self.vx_comp = 0.
      self.vy_comp = 0.
      self.is_quality_valid = 0
      self.ambig_state = 0
      self.x_rms = 0
      self.y_rms = 0
      self.invalid_state = 0
      self.pdh0 = 0
      self.vx_rms = 0
      self.vy_rms = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3dBH5f8B().pack(_x.pose.x, _x.pose.y, _x.pose.z, _x.dyn_prop, _x.id, _x.rcs, _x.vx, _x.vy, _x.vx_comp, _x.vy_comp, _x.is_quality_valid, _x.ambig_state, _x.x_rms, _x.y_rms, _x.invalid_state, _x.pdh0, _x.vx_rms, _x.vy_rms))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 55
      (_x.pose.x, _x.pose.y, _x.pose.z, _x.dyn_prop, _x.id, _x.rcs, _x.vx, _x.vy, _x.vx_comp, _x.vy_comp, _x.is_quality_valid, _x.ambig_state, _x.x_rms, _x.y_rms, _x.invalid_state, _x.pdh0, _x.vx_rms, _x.vy_rms,) = _get_struct_3dBH5f8B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3dBH5f8B().pack(_x.pose.x, _x.pose.y, _x.pose.z, _x.dyn_prop, _x.id, _x.rcs, _x.vx, _x.vy, _x.vx_comp, _x.vy_comp, _x.is_quality_valid, _x.ambig_state, _x.x_rms, _x.y_rms, _x.invalid_state, _x.pdh0, _x.vx_rms, _x.vy_rms))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 55
      (_x.pose.x, _x.pose.y, _x.pose.z, _x.dyn_prop, _x.id, _x.rcs, _x.vx, _x.vy, _x.vx_comp, _x.vy_comp, _x.is_quality_valid, _x.ambig_state, _x.x_rms, _x.y_rms, _x.invalid_state, _x.pdh0, _x.vx_rms, _x.vy_rms,) = _get_struct_3dBH5f8B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3dBH5f8B = None
def _get_struct_3dBH5f8B():
    global _struct_3dBH5f8B
    if _struct_3dBH5f8B is None:
        _struct_3dBH5f8B = struct.Struct("<3dBH5f8B")
    return _struct_3dBH5f8B
